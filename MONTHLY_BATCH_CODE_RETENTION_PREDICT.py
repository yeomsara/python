
import configparser
conf_dir = '/home/cdsadmin/AMT/src/conf/config.ini'
cfg      = configparser.ConfigParser(interpolation=configparser.ExtendedInterpolation())
cfg.read(conf_dir)
#---------------------------------------------------------
# 1) 테이블 생성 할 HANA DB서버 접속정보
global HOST,PORT,DB_ID,DB_PW
HOST = cfg['dbconnect']['host']
PORT = int(cfg['dbconnect']['port'])
DB_ID = cfg['dbconnect']['ID']
DB_PW = cfg['dbconnect']['PW']

# 2) 예측 대상 데이터 및 결과 테이블명
TB_NM1 = cfg['Retention']['APPLY_TB']
TB_NM2 = cfg['Retention']['RESULT_TB']

# 3) 학습용 모델 저장위치
DIR_NM =   cfg['Retention']['MODEL_DIR'] 
MODEL1_FILE =  cfg['Retention']['MODEL1_FILE']  #적합용 모델 pickle 파일 명칭 우수 고객용
MODEL2_FILE =  cfg['Retention']['MODEL2_FILE'] #적합용 모델 pickle 파일 명칭 일반 고객용

#----------------------------------------------------------

#----------------------------------------------------------
# ■ logging
#----------------------------------------------------------
import logging
import logging.config
from datetime import datetime
PYTHON_IP = '10.253.79.23'
MN = 'MONTHLY_BATCH_CODE_RETENTION_PREDICT.py'
LG = 'RETENTION'
# logging.config.fileConfig(str(cfg['common']['log_config']),defaults={'date':datetime.now()})
logger     = logging.getLogger('aml_log')
fh = logging.FileHandler('/home/cdsadmin/AMT/src/logs/AMS/{:%Y%m%d}_AMS.log'.format(datetime.now()))
formatter = logging.Formatter(f'\nERR|CDS|{PYTHON_IP}|AMT|1등급|[ %(asctime)s ]|[{MN}]|{LG}|[ LineNo. : %(lineno)d ]| %(message)s')
fh.setFormatter(formatter)
logger.addHandler(fh)
###==========================================================================###
# default package 
import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings("ignore")
import time,os,psutil
import IPython
from IPython.lib import kernel
import collections
import joblib
import pickle
from hdbcli import dbapi 
from IPython.core.display import display, Image
import multiprocessing
import sqlite3
from dateutil.relativedelta import relativedelta
import argparse


def DB_Connection() :
    conn=dbapi.connect(HOST,PORT,DB_ID,DB_PW) #1) HANA DB서버 접속정보 위에서 선언
    return conn

#테이블 생성하는 SQL실행
def execute_query(query):
    conn = DB_Connection() 
    cur = conn.cursor()
    query = query
    cur.execute(query)
    conn.commit()
    conn.close()
    print("%s 실행완료"%query)



def timecheck(start):
    learn_time = time.time() - start
    train_time = round(learn_time/60)  
    print("소요시간 :",  round(learn_time,-1), "초", "  (",train_time, "분 )\n")
    return learn_time,train_time

def Datachunk_range(rownum_sql) :
    conn = DB_Connection()
    cnt = pd.read_sql(rownum_sql, conn)
    key = int(cnt.values)
    rm  = key % n_core
    ## Split row_num / n_core 
    arg_list_flt =[i for i in range(0,key,int(key/n_core))]
    ## last sequence add remainder 
    if rm > 0:
        arg_list_flt[len(arg_list_flt)-1] = arg_list_flt[len(arg_list_flt)-1]+rm
    else : 
        arg_list_flt.append(arg_list_flt[-1]+arg_list_flt[1])
    conn.close()        
    return arg_list_flt,rm

def SQL_worker(num):    
    b = int(arg_list.index(num))-1
    if (int(arg_list.index(num)) == 0) :
        result = None
    else :
        start_num = int(arg_list[b])+1
        end_num   = int(num)
        print('start_num : %s | end_num : %s'%(start_num,end_num))
        sql =f'''
                SELECT  *
                FROM (SELECT   ROW_NUMBER() OVER (ORDER BY CUST_ID ASC) AS ROW_NUM
                             , *
                      FROM  {db_name}) T1
                WHERE T1.ROW_NUM between {start_num} and {end_num}
              '''
        conn = DB_Connection()
        result = pd.read_sql(sql, conn)
        conn.close()
    return result

def multiprocesser(arg_list) : 
    print('\nstart_arg_list : %s \n'%arg_list)
    p = multiprocessing.Pool(processes = n_core)
    data = p.map(SQL_worker, arg_list) 
    p.close()
    p.join()
    result = pd.concat(data)
    return result   

def list_to_ch_lowlevel(df_train,unique):
    list_ch_lowlevel=[]
    col_train = list(set(list(df_train.columns)) - set(['CUST_ID']))
    for i in range(len(col_train)):  
        if len(df_train[col_train[i]].unique()) < unique:
            list_ch_lowlevel.append(col_train[i])
        else:
            pass
    print(list_ch_lowlevel)
    return(list_ch_lowlevel)

#숫자형으로 변환
def feature_to_int(df_train,feature_ch ):
    col_train = list(set(list(df_train.columns)) - set(['CUST_ID']))
    df_train[col_train] = df_train[col_train].astype('float64')
    df_train[feature_ch] = df_train[feature_ch].astype('int64')
    return(df_train)

#category형으로 변환
def feature_to_ch(df_train,feature_ch_list): 
    col_train = list(set(list(df_train.columns)) - set(['CUST_ID'])) #list(set(list(df_train.columns)) - set(feature_ch+['CUST_ID']))
    df_train[col_train] = df_train[col_train].astype('float64')
    
    for i in enumerate (feature_ch_list) :
        ca = i[1]
        df_train[ca] = df_train[ca].astype('int64').astype('category')
    return(df_train)

def mdl_error_check(model_predict):
    pred_df=data_modi1_raw[data_modi1_raw['BAIN_GRADE_CD'].isin(list(model_predict['BAIN_GRADE_CD'].unique()))]
    check1=len(model_predict)==len(pred_df)
    check2=model_predict['BAIN_GRADE_YM'][1]==YM_BAIN
    check3=pred_df.iloc[0]['BAIN_GRADE_YM']==YM_BAIN
    model_predict['PREDICT_PROB'] = model_predict['PREDICT_PROB'].fillna(0)
    check4=model_predict['PREDICT_PROB'].sum() > 0
    
    if (check1 == 1 & check2 == 1 & check3 == 1 & check4 == 1):
        error_mdl=0
        error_msg='이상 없음'
    elif check1 == 0:
        error_mdl=1
        error_msg='오류1 : 대상 고객 데이터와 예측결과 고객 수 불일치'
    elif check2 == 0:
        error_mdl=2
        error_msg='오류2 : 예측결과 데이터가 설정한 버전이 아님'
    elif check3 == 0:
        error_mdl=3
        error_msg='오류3 : 불러온 데이터가 설정한 버전이 아님'
    else:
        error_mdl=4
        error_msg='오류4 : 예측 결과 이상, 모두 0'    
    return(error_mdl, error_msg)
    print(error_msg)

def del_dup_insert_table(table_name,df):
    conn = DB_Connection()
    cur = conn.cursor()
    input_data = [tuple(x)for x in df.values]
    cols_len = '?,'*int(len(df.columns))
    cols_len = cols_len[:-1]
    
    query_del_dup = f'''DELETE FROM {TB_NM2} WHERE BAIN_GRADE_YM='{YM_BAIN}' '''
    execute_query(query_del_dup)
    
    query    = '''INSERT INTO %s VALUES(%s)'''%(table_name,cols_len)
    print(query)
    cur.executemany(query, input_data)
    conn.commit()
    conn.close()
    return print("%s 테이블 데이터 입력완료"%table_name) 
    
def insert_table(table_name,df):
    conn = DB_Connection() 
    cur = conn.cursor()
    input_data = [tuple(x)for x in df.values]
    cols_len = '?,'*int(len(df.columns))
    cols_len = cols_len[:-1]
    query    = '''INSERT INTO %s VALUES(%s)'''%(table_name,cols_len)
    print(query)
    cur.executemany(query, input_data)
    conn.commit()
    conn.close()
    return print("%s 테이블 데이터 입력완료"%table_name)

def add_logs(module,mdl_type,step,qt,tt,td,st,et,ec=0,es=None) :
    log_df = pd.DataFrame({'MODULE'  :[module],
                            'MODULE_TYPE':[mdl_type],
                            'STEP':[step],
                            'QUERY_TYPE':[qt],
                            'TARGET_TABLE':[tt],
                            'TARGET_DATE' :[td],
                            'START_TIME':[st],
                            'END_TIME':[et],
                            'ERROR_CODE':[ec],
                            'ERROR_STATE':[es]})
    return log_df

#■=====================================================================
try :
    parser = argparse.ArgumentParser(description = 'RETENTION MODEL')
    parser.add_argument('--YM_BAIN', help = '예측 시행년월')
    args = parser.parse_args()
    YM_BAIN = args.YM_BAIN
except : 
    YM_BAIN = None
    
if (YM_BAIN == None) | (YM_BAIN == 'None'):
    # 모델 기준 학습월 과거 시점 설정 : 1은 1개월 전,
    BF_MONTHS=1
    YM_BAIN = (datetime.now() + relativedelta(months=-BF_MONTHS)).strftime('%Y%m')
    print(YM_BAIN, '베인등급 기준 미래 3개월 이탈 예측을 진행합니다.')
#■===================================================================== 
# YM_BAIN = '202009'

#서버에 물리테이블 생성하는 SQL : 위에 설정한 Bain등급 기준월에 맞춰 사용하는 영수증 및 DNA기간 지정 됨.
sql1 = f'''
TRUNCATE TABLE {TB_NM1}
'''

sql2 = f'''
INSERT INTO {TB_NM1}  
(WITH  
RETENTION_TARGET1 AS (
SELECT '{YM_BAIN}' AS BAIN_GRADE_YM, A2.CUST_ID, A1.GRADE_CD AS BAIN_GRADE_CD  
FROM  CDS_DW.TB_BAIN_MEMBR_GRADE a1 JOIN  CDS_AMT.TB_AMT_BIZTP_CUST_DNA_DATA a2 
ON a1.CUST_ID=a2.CUST_ID AND a2.AFLCO_CD ='001' AND a2.BIZTP_CD ='10' AND TO_CHAR(a2.YM_WCNT ,'YYYYMMDD')= CONCAT( TO_CHAR(ADD_MONTHS('{YM_BAIN}',+1),'YYYYMM'),'01')  AND a1.GRADE_YM='{YM_BAIN}'
),
RCIPT_DETAIL AS  (
 SELECT
  B.CUST_ID
 ,A.BSN_DT 
-- ,A.PRDT_CD
-- ,C.PRDT_DCODE_CD
 ,D.PRDT_DI_CD
, sum(A.SALE_AMT)  AS SALE_AMT
		 FROM  (SELECT CUST_ID FROM RETENTION_TARGET1 ) B 
		 JOIN CDS_DW.TB_DW_RCIPT_DETAIL A ON B.CUST_ID=A.CUST_ID
		 JOIN (SELECT PRDT_CD , PRDT_DCODE_CD
		       FROM CDS_DW.TB_DW_PRDT_MASTR 
		       WHERE AFLCO_CD = '001' AND BIZTP_CD = '10') C ON A.PRDT_CD  = C.PRDT_CD
		 JOIN (SELECT PRDT_DCODE_CD,PRDT_DI_CD
		   	   FROM CDS_DW.TB_DW_PRDT_DCODE_CD
		   	   WHERE AFLCO_CD = '001' AND BIZTP_CD = '10') D ON C.PRDT_DCODE_CD  = D.PRDT_DCODE_CD 
		 WHERE TO_CHAR( BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}',-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}', +0),'YYYYMM')
		   AND A.AFLCO_CD ='001' 
		   AND A.BIZTP_CD ='10'
		   AND A.SALE_TRGT_YN    = 'Y'               
		   AND A.RL_SALE_TRGT_YN = 'Y'               
		   AND A.SALE_AMT > 0
		   AND A.CUST_ID IS NOT NULL
		   GROUP BY 
		   B.CUST_ID
		  ,A.BSN_DT
		--,A.PRDT_CD
		--,C.PRDT_DCODE_CD
		  ,D.PRDT_DI_CD
		  ), 

RCIPT_SUMMARY_1Y AS (
SELECT
CUST_ID,
CASE WHEN COALESCE(CNT_Q1,0) > 0  THEN 1 ELSE 0 END AS ORD_Q1_YN ,
COALESCE(CNT_Q1/NULLIF(CNT_Q1,0),0) + COALESCE(CNT_Q2/NULLIF(CNT_Q2,0),0) + COALESCE(CNT_Q3/NULLIF(CNT_Q3,0),0) + COALESCE(CNT_Q4/NULLIF(CNT_Q4,0),0) AS ORD_4QTY,
CASE WHEN
	COALESCE(CNT_Q1,0) > 0
			THEN 10+COALESCE(CNT_Q1/NULLIF(CNT_Q1,0),0) + COALESCE(CNT_Q2/NULLIF(CNT_Q2,0),0)  + COALESCE(CNT_Q3/NULLIF(CNT_Q3,0),0) + COALESCE(CNT_Q4/NULLIF(CNT_Q4,0),0) 
	ELSE
			COALESCE(CNT_Q1/NULLIF(CNT_Q1,0),0) + COALESCE(CNT_Q2/NULLIF(CNT_Q2,0),0)  + COALESCE(CNT_Q3/NULLIF(CNT_Q3,0),0) + COALESCE(CNT_Q4/NULLIF(CNT_Q4,0),0) 
	END AS ORD_4QTY_GRADE,

COALESCE(CNT_Q1,0)-COALESCE(CNT_Q2,0) AS CNT_DIFF_Q1_Q2 ,
COALESCE(CNT_Q2,0)-COALESCE(CNT_Q3,0) AS CNT_DIFF_Q2_Q3 ,
COALESCE(CNT_Q3,0)-COALESCE(CNT_Q4,0) AS CNT_DIFF_Q3_Q4 ,


CASE WHEN COALESCE(CNT_Q1,0) > 0 AND COALESCE(CNT_Q2,0)=0 THEN 1 ELSE COALESCE(COALESCE(CNT_Q1,0)/NULLIF(CNT_Q2,0) - 1,0) END AS CNT_RT_Q1_Q2 ,
CASE WHEN COALESCE(CNT_Q2,0) > 0 AND COALESCE(CNT_Q3,0)=0 THEN 1 ELSE COALESCE(COALESCE(CNT_Q2,0)/NULLIF(CNT_Q3,0) - 1,0) END AS CNT_RT_Q2_Q3 ,
CASE WHEN COALESCE(CNT_Q3,0) > 0 AND COALESCE(CNT_Q4,0)=0 THEN 1 ELSE COALESCE(COALESCE(CNT_Q3,0)/NULLIF(CNT_Q4,0) - 1,0) END AS CNT_RT_Q3_Q4 ,


 COALESCE(AMT_Q1/NULLIF(CNT_Q1,0),0)-COALESCE(CNT_Q2/NULLIF(CNT_Q2,0),0)   AS DAVG_AMT_DIFF_Q1_Q2  
,COALESCE(AMT_Q2/NULLIF(CNT_Q2,0),0)-COALESCE(AMT_Q3/NULLIF(CNT_Q3,0),0)   AS DAVG_AMT_DIFF_Q2_Q3 
,COALESCE(AMT_Q3/NULLIF(CNT_Q3,0),0)-COALESCE(AMT_Q4/NULLIF(CNT_Q4,0),0)   AS DAVG_AMT_DIFF_Q3_Q4 


,CASE WHEN COALESCE(AMT_Q1/NULLIF(CNT_Q1,0),0) > 0 AND COALESCE(AMT_Q2/NULLIF(CNT_Q2,0),0)=0 THEN 1 ELSE  COALESCE(COALESCE(AMT_Q2/NULLIF(CNT_Q1,0),0)/(AMT_Q2/NULLIF(CNT_Q2,0)) - 1,0) END AS DAVG_AMT_RT_Q1_Q2  
,CASE WHEN COALESCE(AMT_Q2/NULLIF(CNT_Q2,0),0) > 0 AND COALESCE(AMT_Q3/NULLIF(CNT_Q3,0),0)=0 THEN 1 ELSE  COALESCE(COALESCE(AMT_Q3/NULLIF(CNT_Q2,0),0)/(AMT_Q3/NULLIF(CNT_Q3,0)) - 1,0) END AS DAVG_AMT_RT_Q2_Q3  
,CASE WHEN COALESCE(AMT_Q3/NULLIF(CNT_Q3,0),0) > 0 AND COALESCE(AMT_Q4/NULLIF(CNT_Q4,0),0)=0 THEN 1 ELSE  COALESCE(COALESCE(AMT_Q3/NULLIF(CNT_Q3,0),0)/(AMT_Q4/NULLIF(CNT_Q4,0)) - 1,0) END AS DAVG_AMT_RT_Q3_Q4 

, COALESCE(CNT_Q1,0) AS CNT_Q1
, COALESCE(CNT_Q2,0) AS CNT_Q2
--, COALESCE(CNT_Q3,0) AS CNT_Q3
--, COALESCE(CNT_Q4,0) AS CNT_Q4

--AMT_Q1/NULLIF(CNT_Q1,0) AS  avg_3M, AMT_Q2/NULLIF(CNT_Q2,0) AS  avg_6M,  AMT_Q3/NULLIF(CNT_Q3,0) AS  avg_9M,  AMT_Q4/NULLIF(CNT_Q4,0) AS  avg_12M 

FROM ( 
SELECT
--B.CUST_ID, 
CUST_ID,
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') THEN BSN_DT ELSE NULL END) AS CNT_Q1, 

COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') THEN BSN_DT ELSE NULL END) AS CNT_Q2,

COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-8),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-6),'YYYYMM') THEN BSN_DT ELSE NULL END) AS CNT_Q3,

COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-11),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-9),'YYYYMM') THEN BSN_DT ELSE NULL END) AS CNT_Q4,

sum(CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') THEN SALE_AMT ELSE 0 END) AS AMT_Q1, 

sum(CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') THEN SALE_AMT ELSE 0 END) AS  AMT_Q2,

sum(CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-8),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-6),'YYYYMM') THEN SALE_AMT ELSE 0 END) AS  AMT_Q3,

sum(CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-11),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-9),'YYYYMM') THEN SALE_AMT ELSE 0 END) AS  AMT_Q4
FROM
(
(SELECT   CUST_ID, BSN_DT , sum(SALE_AMT)  AS SALE_AMT FROM RCIPT_DETAIL  GROUP BY CUST_ID, BSN_DT)
UNION 
(SELECT B.CUST_ID, A.BSN_DT, sum(A.SALE_AMT)  AS SALE_AMT
		 FROM  (SELECT CUST_ID FROM RETENTION_TARGET1 ) B 
		 JOIN CDS_DW.TB_DW_RCIPT_DETAIL A ON B.CUST_ID=A.CUST_ID
		 WHERE TO_CHAR( BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}',-11),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}', -6),'YYYYMM')
		   AND A.AFLCO_CD ='001' 
		   AND A.BIZTP_CD ='10'
		   AND A.SALE_TRGT_YN    = 'Y'               
		   AND A.RL_SALE_TRGT_YN = 'Y'               
		   AND A.SALE_AMT > 0
		   AND A.CUST_ID IS NOT NULL
		   GROUP BY 
		   B.CUST_ID
		  ,A.BSN_DT)
) GROUP BY CUST_ID)
),  

OTH_CH_USE1 AS ( 
SELECT
t1.CUST_ID,
--CASE WHEN  PURCHS_CYCLE_ELAPSE_20TRD IS NOT NULL THEN 1 ELSE NULL END AS OTH_CH_USE_20TRD_YN,
--OTH_CH_DAVG_AMT_20TRD,
--OTH_CH_DAVG_AMT_20TRD_EX,
--PURCHS_CYCLE_ELAPSE_20TRD,
--CASE WHEN COALESCE(OTH_CH_DAVG_AMT_20TRD,0) > 0 AND COALESCE(OTH_CH_DAVG_AMT_20TRD_EX,0)=0 THEN 1 ELSE COALESCE(OTH_CH_DAVG_AMT_20TRD,0)/NULLIF(OTH_CH_DAVG_AMT_20TRD_EX,0) - 1 END AS OTH_CH_DAVG_AMT_20TRD_RT,
--
--CASE WHEN  PURCHS_CYCLE_ELAPSE_40NOB IS NOT NULL THEN 1 ELSE NULL END AS OTH_CH_USE_40NOB_YN,
--OTH_CH_DAVG_AMT_40NOB,
--OTH_CH_DAVG_AMT_40NOB_EX,
--PURCHS_CYCLE_ELAPSE_40NOB,
--CASE WHEN COALESCE(OTH_CH_DAVG_AMT_40NOB,0) > 0 AND COALESCE(OTH_CH_DAVG_AMT_40NOB_EX,0)=0 THEN 1 ELSE COALESCE(OTH_CH_DAVG_AMT_40NOB,0)/NULLIF(OTH_CH_DAVG_AMT_40NOB_EX,0) - 1 END AS OTH_CH_DAVG_AMT_40NOB_RT,
--
--
--CASE WHEN  PURCHS_CYCLE_ELAPSE_41PKM IS NOT NULL THEN 1 ELSE NULL END AS OTH_CH_USE_41PKM_YN,
--OTH_CH_DAVG_AMT_41PKM,
--OTH_CH_DAVG_AMT_41PKM_EX,
--PURCHS_CYCLE_ELAPSE_41PKM,
--CASE WHEN COALESCE(OTH_CH_DAVG_AMT_41PKM,0) > 0 AND COALESCE(OTH_CH_DAVG_AMT_41PKM_EX,0)=0 THEN 1 ELSE COALESCE(OTH_CH_DAVG_AMT_41PKM,0)/NULLIF(OTH_CH_DAVG_AMT_41PKM_EX,0) - 1 END AS OTH_CH_DAVG_AMT_41PKM_RT,


--1 AS OTH_CH_USE_OFF_BIZTP_YN, 
CASE WHEN  PURCHS_CYCLE_ELAPSE_40NOB IS NULL AND PURCHS_CYCLE_ELAPSE_41PKM IS NULL THEN PURCHS_CYCLE_ELAPSE_20TRD
     WHEN  PURCHS_CYCLE_ELAPSE_20TRD IS NULL AND PURCHS_CYCLE_ELAPSE_41PKM IS NULL THEN PURCHS_CYCLE_ELAPSE_40NOB
     WHEN  PURCHS_CYCLE_ELAPSE_20TRD IS NULL AND PURCHS_CYCLE_ELAPSE_40NOB IS NULL THEN PURCHS_CYCLE_ELAPSE_41PKM

     WHEN PURCHS_CYCLE_ELAPSE_20TRD <=  PURCHS_CYCLE_ELAPSE_41PKM AND  PURCHS_CYCLE_ELAPSE_20TRD <=  PURCHS_CYCLE_ELAPSE_40NOB   THEN PURCHS_CYCLE_ELAPSE_20TRD
     WHEN PURCHS_CYCLE_ELAPSE_40NOB <=  PURCHS_CYCLE_ELAPSE_20TRD AND  PURCHS_CYCLE_ELAPSE_40NOB <=  PURCHS_CYCLE_ELAPSE_41PKM   THEN PURCHS_CYCLE_ELAPSE_40NOB
     WHEN PURCHS_CYCLE_ELAPSE_41PKM <=  PURCHS_CYCLE_ELAPSE_40NOB AND  PURCHS_CYCLE_ELAPSE_41PKM <=  PURCHS_CYCLE_ELAPSE_20TRD   THEN PURCHS_CYCLE_ELAPSE_41PKM
     
     
     WHEN PURCHS_CYCLE_ELAPSE_41PKM IS NULL AND PURCHS_CYCLE_ELAPSE_20TRD <= PURCHS_CYCLE_ELAPSE_40NOB   THEN PURCHS_CYCLE_ELAPSE_20TRD
     WHEN PURCHS_CYCLE_ELAPSE_20TRD IS NULL AND PURCHS_CYCLE_ELAPSE_40NOB <= PURCHS_CYCLE_ELAPSE_41PKM   THEN PURCHS_CYCLE_ELAPSE_40NOB
     WHEN PURCHS_CYCLE_ELAPSE_40NOB IS NULL AND PURCHS_CYCLE_ELAPSE_41PKM <= PURCHS_CYCLE_ELAPSE_20TRD   THEN PURCHS_CYCLE_ELAPSE_41PKM
     
     WHEN PURCHS_CYCLE_ELAPSE_41PKM IS NULL AND PURCHS_CYCLE_ELAPSE_20TRD > PURCHS_CYCLE_ELAPSE_40NOB   THEN PURCHS_CYCLE_ELAPSE_40NOB
     WHEN PURCHS_CYCLE_ELAPSE_20TRD IS NULL AND PURCHS_CYCLE_ELAPSE_40NOB > PURCHS_CYCLE_ELAPSE_41PKM   THEN PURCHS_CYCLE_ELAPSE_41PKM
     WHEN PURCHS_CYCLE_ELAPSE_40NOB IS NULL AND PURCHS_CYCLE_ELAPSE_41PKM > PURCHS_CYCLE_ELAPSE_20TRD   THEN PURCHS_CYCLE_ELAPSE_20TRD
     

     WHEN PURCHS_CYCLE_ELAPSE_20TRD IS NULL THEN PURCHS_CYCLE_ELAPSE_40NOB
     ELSE PURCHS_CYCLE_ELAPSE_20TRD END AS PURCHS_CYCLE_ELAPSE_OFF_BIZTP 
     
FROM 
(SELECT CUST_ID  FROM RETENTION_TARGET1)  t1
JOIN 
(SELECT CUST_ID,
MAX(CASE WHEN BIZTP_CD='20' THEN DAVG_PURCHS_AMT_EXC_ELEC END) AS OTH_CH_DAVG_AMT_20TRD, 
MAX(CASE WHEN BIZTP_CD='40' THEN DAVG_PURCHS_AMT_EXC_ELEC END) AS OTH_CH_DAVG_AMT_40NOB, 
MAX(CASE WHEN BIZTP_CD='41' THEN DAVG_PURCHS_AMT_EXC_ELEC END) AS OTH_CH_DAVG_AMT_41PKM, 

MAX(CASE WHEN BIZTP_CD='20' THEN PURCHS_CYCLE_ELAPSE END) AS PURCHS_CYCLE_ELAPSE_20TRD, 
MAX(CASE WHEN BIZTP_CD='40' THEN PURCHS_CYCLE_ELAPSE END) AS PURCHS_CYCLE_ELAPSE_40NOB,
MAX(CASE WHEN BIZTP_CD='41' THEN PURCHS_CYCLE_ELAPSE END) AS PURCHS_CYCLE_ELAPSE_41PKM 
FROM CDS_AMT.TB_AMT_BIZTP_CUST_DNA_DATA WHERE TO_CHAR(YM_WCNT ,'YYYYMMDD')=CONCAT( TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+1),'YYYYMM'),'01') 
AND AFLCO_CD='001' AND BIZTP_CD IN ('20','40','41') GROUP BY CUST_ID 
) t3 ON t1.CUST_ID = t3.CUST_ID  
LEFT JOIN 
(SELECT CUST_ID,
MAX(CASE WHEN BIZTP_CD='20' THEN DAVG_PURCHS_AMT_EXC_ELEC END) AS OTH_CH_DAVG_AMT_20TRD_EX, 
MAX(CASE WHEN BIZTP_CD='40' THEN DAVG_PURCHS_AMT_EXC_ELEC END) AS OTH_CH_DAVG_AMT_40NOB_EX, 
MAX(CASE WHEN BIZTP_CD='41' THEN DAVG_PURCHS_AMT_EXC_ELEC END) AS OTH_CH_DAVG_AMT_41PKM_EX, 

MAX(CASE WHEN BIZTP_CD='20' THEN PURCHS_CYCLE_ELAPSE END) AS PURCHS_CYCLE_ELAPSE_20TRD_EX, 
MAX(CASE WHEN BIZTP_CD='40' THEN PURCHS_CYCLE_ELAPSE END) AS PURCHS_CYCLE_ELAPSE_40NOB_EX,
MAX(CASE WHEN BIZTP_CD='41' THEN PURCHS_CYCLE_ELAPSE END) AS PURCHS_CYCLE_ELAPSE_41PKM_EX 
FROM CDS_AMT.TB_AMT_BIZTP_CUST_DNA_DATA WHERE TO_CHAR(YM_WCNT ,'YYYYMMDD')=CONCAT(TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM'),'01') 
AND AFLCO_CD='001' AND BIZTP_CD IN ('20','40','41') GROUP BY CUST_ID 
) t4 ON t1.CUST_ID = t4.CUST_ID
WHERE  t3.PURCHS_CYCLE_ELAPSE_20TRD IS NOT NULL OR  t3.PURCHS_CYCLE_ELAPSE_40NOB IS NOT NULL OR  t3.PURCHS_CYCLE_ELAPSE_41PKM IS NOT NULL 
),


/***************************************************************************************************/	
/** 상품분류체계 변경 시 변경 부분1 시작 : PRDT_ORD1부터 PRDT_ORD4 목록 담당 코드에 맞게 삭제 및 추가**/
PRDT_ORD1 AS
(SELECT --'{YM_BAIN}'  AS BAIN_GRADE_YM,
/*+ PARALLEL(a 4) */ CUST_ID,

COALESCE(AMT_LV1_10_Q1,0)/NULLIF(CNT_LV1_10_Q1,0)  AS DAVG_AMT_LV1_10_Q1,
COALESCE(AMT_LV1_11_Q1,0)/NULLIF(CNT_LV1_11_Q1,0)  AS DAVG_AMT_LV1_11_Q1,   


COALESCE(AMT_LV1_10_Q2,0)/NULLIF(CNT_LV1_10_Q2,0)  AS DAVG_AMT_LV1_10_Q2,
COALESCE(AMT_LV1_11_Q2,0)/NULLIF(CNT_LV1_11_Q2,0)  AS DAVG_AMT_LV1_11_Q2, 

--DAYS_BETWEEN(MAX_DT,CONCAT(TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+1),'YYYYMM'),'01')) AS PURCHS_CYCLE_ELAPSE,
DAYS_BETWEEN(MAX_DT_LV1_10,CONCAT(TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+1),'YYYYMM'),'01')) AS PURCHS_CYCLE_ELAPSE_LV1_10,
DAYS_BETWEEN(MAX_DT_LV1_11,CONCAT(TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+1),'YYYYMM'),'01')) AS PURCHS_CYCLE_ELAPSE_LV1_11,

CASE WHEN COALESCE(CNT_LV1_10_Q1,0) > 0 AND COALESCE(CNT_LV1_10_Q2,0)=0 THEN 1 ELSE COALESCE(COALESCE(CNT_LV1_10_Q1,0)/NULLIF(CNT_LV1_10_Q2,0) - 1,0) END AS CNT_LV1_10_RT,
CASE WHEN COALESCE(CNT_LV1_11_Q1,0) > 0 AND COALESCE(CNT_LV1_11_Q2,0)=0 THEN 1 ELSE COALESCE(COALESCE(CNT_LV1_11_Q1,0)/NULLIF(CNT_LV1_11_Q2,0) - 1,0) END AS CNT_LV1_11_RT, 
 
CNT_LV1_10_TOT,
CNT_LV1_11_TOT 
FROM
(
SELECT /*+ PARALLEL(a 4) */ a.CUST_ID, 
		COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='10'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_10_Q1,
		COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='11'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_11_Q1, 
		
		COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='10'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_10_Q2,
		COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='11'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_11_Q2, 
		
		 
		COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='10'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_10_TOT,
		COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='11'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_11_TOT, 
		 
		SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='10'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_10_Q1,
		SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='11'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_11_Q1,  
		
		SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='10'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_10_Q2,
		SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='11'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_11_Q2,
		
		--MAX(A.BSN_DT) AS MAX_DT,
		MAX(CASE WHEN PRDT_DI_CD='10'  THEN A.BSN_DT ELSE NULL END) AS MAX_DT_LV1_10,
		MAX(CASE WHEN PRDT_DI_CD='11'  THEN A.BSN_DT ELSE NULL END) AS MAX_DT_LV1_11 

		FROM 
		RCIPT_DETAIL A 
		WHERE PRDT_DI_CD IN ('10','11') 
		GROUP BY a.CUST_ID	
)
),

PRDT_ORD2 AS
(SELECT  
CUST_ID,

COALESCE(AMT_LV1_20_Q1,0)/NULLIF(CNT_LV1_20_Q1,0)  AS DAVG_AMT_LV1_20_Q1,
COALESCE(AMT_LV1_30_Q1,0)/NULLIF(CNT_LV1_30_Q1,0)  AS DAVG_AMT_LV1_30_Q1,

COALESCE(AMT_LV1_20_Q2,0)/NULLIF(CNT_LV1_20_Q2,0)  AS DAVG_AMT_LV1_20_Q2,
COALESCE(AMT_LV1_30_Q2,0)/NULLIF(CNT_LV1_30_Q2,0)  AS DAVG_AMT_LV1_30_Q2,
  
 
DAYS_BETWEEN(MAX_DT_LV1_20,CONCAT(TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+1),'YYYYMM'),'01')) AS PURCHS_CYCLE_ELAPSE_LV1_20,
DAYS_BETWEEN(MAX_DT_LV1_30,CONCAT(TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+1),'YYYYMM'),'01')) AS PURCHS_CYCLE_ELAPSE_LV1_30,
 
CASE WHEN COALESCE(CNT_LV1_20_Q1,0) > 0 AND COALESCE(CNT_LV1_20_Q2,0)=0 THEN 1 ELSE COALESCE(COALESCE(CNT_LV1_20_Q1,0)/NULLIF(CNT_LV1_20_Q2,0) - 1,0) END AS CNT_LV1_20_RT,
CASE WHEN COALESCE(CNT_LV1_30_Q1,0) > 0 AND COALESCE(CNT_LV1_30_Q2,0)=0 THEN 1 ELSE COALESCE(COALESCE(CNT_LV1_30_Q1,0)/NULLIF(CNT_LV1_30_Q2,0) - 1,0) END AS CNT_LV1_30_RT,
  
CNT_LV1_20_TOT,
CNT_LV1_30_TOT   
FROM
(
	SELECT /*+ PARALLEL(a 4) */ a.CUST_ID, 
	 
	COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='20'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_20_Q1,
	COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='30'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_30_Q1, 
	 
	COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='20'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_20_Q2,
	COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='30'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_30_Q2,
	
	COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='20'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_20_TOT,
	COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='30'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_30_TOT,
	
	SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='20'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_20_Q1,
	SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='30'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_30_Q1,
	  
	SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='20'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_20_Q2,
	SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='30'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_30_Q2,
	
	MAX(CASE WHEN PRDT_DI_CD='20'  THEN A.BSN_DT ELSE NULL END) AS MAX_DT_LV1_20,
	MAX(CASE WHEN PRDT_DI_CD='30'  THEN A.BSN_DT ELSE NULL END) AS MAX_DT_LV1_30 

	FROM 
	RCIPT_DETAIL A 
	WHERE PRDT_DI_CD IN ('20','30')  
	GROUP BY a.CUST_ID	
)
),

PRDT_ORD3 AS
(SELECT  
CUST_ID,
COALESCE(AMT_LV1_40_Q1,0)/NULLIF(CNT_LV1_40_Q1,0)  AS DAVG_AMT_LV1_40_Q1,
COALESCE(AMT_LV1_41_Q1,0)/NULLIF(CNT_LV1_41_Q1,0)  AS DAVG_AMT_LV1_41_Q1,
COALESCE(AMT_LV1_42_Q1,0)/NULLIF(CNT_LV1_42_Q1,0)  AS DAVG_AMT_LV1_42_Q1,
 
COALESCE(AMT_LV1_40_Q2,0)/NULLIF(CNT_LV1_40_Q2,0)  AS DAVG_AMT_LV1_40_Q2,
COALESCE(AMT_LV1_41_Q2,0)/NULLIF(CNT_LV1_41_Q2,0)  AS DAVG_AMT_LV1_41_Q2,
COALESCE(AMT_LV1_42_Q2,0)/NULLIF(CNT_LV1_42_Q2,0)  AS DAVG_AMT_LV1_42_Q2,
 
DAYS_BETWEEN(MAX_DT_LV1_40,CONCAT(TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+1),'YYYYMM'),'01')) AS PURCHS_CYCLE_ELAPSE_LV1_40,
DAYS_BETWEEN(MAX_DT_LV1_41,CONCAT(TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+1),'YYYYMM'),'01')) AS PURCHS_CYCLE_ELAPSE_LV1_41,
DAYS_BETWEEN(MAX_DT_LV1_42,CONCAT(TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+1),'YYYYMM'),'01')) AS PURCHS_CYCLE_ELAPSE_LV1_42,
 
CASE WHEN COALESCE(CNT_LV1_40_Q1,0) > 0 AND COALESCE(CNT_LV1_40_Q2,0)=0 THEN 1 ELSE COALESCE(COALESCE(CNT_LV1_40_Q1,0)/NULLIF(CNT_LV1_40_Q2,0) - 1,0) END AS CNT_LV1_40_RT,
CASE WHEN COALESCE(CNT_LV1_41_Q1,0) > 0 AND COALESCE(CNT_LV1_41_Q2,0)=0 THEN 1 ELSE COALESCE(COALESCE(CNT_LV1_41_Q1,0)/NULLIF(CNT_LV1_41_Q2,0) - 1,0) END AS CNT_LV1_41_RT,
CASE WHEN COALESCE(CNT_LV1_42_Q1,0) > 0 AND COALESCE(CNT_LV1_42_Q2,0)=0 THEN 1 ELSE COALESCE(COALESCE(CNT_LV1_42_Q1,0)/NULLIF(CNT_LV1_42_Q2,0) - 1,0) END AS CNT_LV1_42_RT, 

CNT_LV1_40_TOT,
CNT_LV1_41_TOT,
CNT_LV1_42_TOT  
FROM
(
SELECT /*+ PARALLEL(a 4) */ a.CUST_ID, 
 
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='40'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_40_Q1,
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='41'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_41_Q1,
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='42'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_42_Q1,
 
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='40'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_40_Q2,
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='41'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_41_Q2,
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='42'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_42_Q2,
 
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='40'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_40_TOT,
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='41'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_41_TOT,
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='42'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_42_TOT,

SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='40'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_40_Q1,
SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='41'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_41_Q1,
SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='42'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_42_Q1,

SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='40'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_40_Q2,
SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='41'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_41_Q2,
SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='42'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_42_Q2,
 
MAX(CASE WHEN PRDT_DI_CD='40'  THEN A.BSN_DT ELSE NULL END) AS MAX_DT_LV1_40,
MAX(CASE WHEN PRDT_DI_CD='41'  THEN A.BSN_DT ELSE NULL END) AS MAX_DT_LV1_41,
MAX(CASE WHEN PRDT_DI_CD='42'  THEN A.BSN_DT ELSE NULL END) AS MAX_DT_LV1_42 

	FROM 
	RCIPT_DETAIL A 
	WHERE PRDT_DI_CD IN ('40','41','42') 
	GROUP BY a.CUST_ID	
)
),
PRDT_ORD4 AS (
SELECT   CUST_ID,
COALESCE(AMT_LV1_50_Q1,0)/NULLIF(CNT_LV1_50_Q1,0)  AS DAVG_AMT_LV1_50_Q1,
COALESCE(AMT_LV1_60_Q1,0)/NULLIF(CNT_LV1_60_Q1,0)  AS DAVG_AMT_LV1_60_Q1,
COALESCE(AMT_LV1_70_Q1,0)/NULLIF(CNT_LV1_70_Q1,0)  AS DAVG_AMT_LV1_70_Q1,  

COALESCE(AMT_LV1_50_Q2,0)/NULLIF(CNT_LV1_50_Q2,0)  AS DAVG_AMT_LV1_50_Q2,
COALESCE(AMT_LV1_60_Q2,0)/NULLIF(CNT_LV1_60_Q2,0)  AS DAVG_AMT_LV1_60_Q2,
COALESCE(AMT_LV1_70_Q2,0)/NULLIF(CNT_LV1_70_Q2,0)  AS DAVG_AMT_LV1_70_Q2,

DAYS_BETWEEN(MAX_DT_LV1_50,CONCAT(TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+1),'YYYYMM'),'01')) AS PURCHS_CYCLE_ELAPSE_LV1_50,
DAYS_BETWEEN(MAX_DT_LV1_60,CONCAT(TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+1),'YYYYMM'),'01')) AS PURCHS_CYCLE_ELAPSE_LV1_60,
DAYS_BETWEEN(MAX_DT_LV1_70,CONCAT(TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+1),'YYYYMM'),'01')) AS PURCHS_CYCLE_ELAPSE_LV1_70, 

CASE WHEN COALESCE(CNT_LV1_50_Q1,0) > 0 AND COALESCE(CNT_LV1_50_Q2,0)=0 THEN 1 ELSE COALESCE(COALESCE(CNT_LV1_50_Q1,0)/NULLIF(CNT_LV1_50_Q2,0) - 1,0) END AS CNT_LV1_50_RT,
CASE WHEN COALESCE(CNT_LV1_60_Q1,0) > 0 AND COALESCE(CNT_LV1_60_Q2,0)=0 THEN 1 ELSE COALESCE(COALESCE(CNT_LV1_60_Q1,0)/NULLIF(CNT_LV1_60_Q2,0) - 1,0) END AS CNT_LV1_60_RT,
CASE WHEN COALESCE(CNT_LV1_70_Q1,0) > 0 AND COALESCE(CNT_LV1_70_Q2,0)=0 THEN 1 ELSE COALESCE(COALESCE(CNT_LV1_70_Q1,0)/NULLIF(CNT_LV1_70_Q2,0) - 1,0) END AS CNT_LV1_70_RT,

CNT_LV1_50_TOT,
CNT_LV1_60_TOT,
CNT_LV1_70_TOT
FROM
(
SELECT /*+ PARALLEL(a 4) */ a.CUST_ID,
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='50'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_50_Q1,
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='60'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_60_Q1,
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='70'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_70_Q1,

COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='50'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_50_Q2,
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='60'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_60_Q2,
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='70'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_70_Q2,

COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='50'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_50_TOT,
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='60'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_60_TOT,
COUNT(DISTINCT CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='70'  THEN A.BSN_DT ELSE NULL END) AS CNT_LV1_70_TOT,

SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='50'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_50_Q1,
SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='60'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_60_Q1,
SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-2),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-0),'YYYYMM') AND PRDT_DI_CD='70'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_70_Q1,

SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='50'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_50_Q2,
SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='60'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_60_Q2,
SUM( CASE WHEN TO_CHAR(BSN_DT,'YYYYMM') BETWEEN TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-3),'YYYYMM') AND PRDT_DI_CD='70'  THEN A.SALE_AMT ELSE 0 END) AS AMT_LV1_70_Q2,
 
MAX(CASE WHEN PRDT_DI_CD='50'  THEN A.BSN_DT ELSE NULL END) AS MAX_DT_LV1_50,
MAX(CASE WHEN PRDT_DI_CD='60'  THEN A.BSN_DT ELSE NULL END) AS MAX_DT_LV1_60,
MAX(CASE WHEN PRDT_DI_CD='70'  THEN A.BSN_DT ELSE NULL END) AS MAX_DT_LV1_70

	FROM 
	RCIPT_DETAIL A 
	WHERE PRDT_DI_CD IN ('50','60','70')
	GROUP BY a.CUST_ID	
)
),
/** 상품분류체계 변경 시 변경 부분1 끝 : PRDT_ORD1부터 PRDT_ORD4 목록 담당 코드에 맞게 삭제 및 추가**/
/***************************************************************************************************/
POINT AS
(SELECT 
t0.CUST_ID, t1.USEFL_POINT  , COALESCE(POINT_AF_SAVE,0) AS POINT_AF_SAVE, COALESCE(POINT_AF_USE,0) AS POINT_AF_USE,
CASE WHEN t1.USEFL_POINT+COALESCE(POINT_AF_USE,0) - COALESCE(POINT_AF_SAVE,0) < 0 THEN 0 ELSE  t1.USEFL_POINT+COALESCE(POINT_AF_USE,0) - COALESCE(POINT_AF_SAVE,0) END AS USEFL_POINT_EX,
COALESCE(POINT_SAVE_6M,0) AS POINT_SAVE_6M
FROM (SELECT CUST_ID  FROM RETENTION_TARGET1)  t0 JOIN CDS_DW.TB_DW_POINT_CUST_RMAIN_POINT t1
ON t0.CUST_ID = t1.CUST_ID
LEFT JOIN (
SELECT CUST_ID,
SUM(CASE WHEN  SAVING_DT >= CONCAT(TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+1),'YYYY-MM'),'-01') THEN SAVING_POINT ELSE 0 END) AS POINT_AF_SAVE,
SUM(CASE WHEN TO_CHAR(SAVING_DT,'YYYYMM') BETWEEN  TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYYMM') AND TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+0),'YYYYMM') THEN SAVING_POINT ELSE 0 END) AS POINT_SAVE_6M
FROM CDS_DW.TB_DW_POINT_SAVING    --아직 테이블 이관 안 됨 
WHERE SAVING_DT BETWEEN CONCAT(TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,-5),'YYYY-MM'),'-01') AND (SELECT ADD_DAYS(max(LAST_LOAD_DT),-1)  FROM CDS_DW.TB_DW_POINT_CUST_RMAIN_POINT) GROUP BY CUST_ID) t2
ON t1.CUST_ID = t2.CUST_ID
LEFT JOIN (
SELECT CUST_ID, sum(USE_POINT) AS POINT_AF_USE  FROM CDS_DW.TB_DW_POINT_USE 
WHERE USE_DT BETWEEN CONCAT( TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+1),'YYYY-MM'),'-01') AND (SELECT ADD_DAYS(max(LAST_LOAD_DT),-1)  FROM CDS_DW.TB_DW_POINT_CUST_RMAIN_POINT) GROUP BY CUST_ID) t3
ON t1.CUST_ID = t3.CUST_ID
)


SELECT  DF1.BAIN_GRADE_YM
	  , t1.YM_WCNT AS DNA_YM_WCNT
	  , DF1.CUST_ID 
      , COALESCE(DF1.BAIN_GRADE_CD,'99') AS BAIN_GRADE_CD
	  , t4.GRADE_NM
      
/*1. 고객 유형(고객 내적요인) */
--1) 고객의 데모적 특성      
      , COALESCE (t1.AGE,999) AS AGE
      , COALESCE (t1.LSTAGE_GROUP, '99') AS LSTAGE_GROUP, COALESCE (t3.DNA_ID_NM,'기타') AS LSTAGE_NM
      

--3) 고객로열티  
	  
	  , COALESCE (t1.FRST_PARTY_ELAPSE,0) AS FRST_PARTY_ELAPSE
  	  , COALESCE (t2.CUST_GRADE_CD,9) AS GRADE_EMART_001_01
	  
/*2. 이탈 징후(이용 니즈 변화) */
	  
--1) 보유자산, 이용규모변화  : 포인트 사용액, 이용 변동성, 앱 사용 실적 등	  
	  --신세계포인트
	  , COALESCE(DF3.USEFL_POINT_EX,0) AS USEFL_POINT_EX
	  , COALESCE(DF3.POINT_SAVE_6M,0) AS POINT_SAVE_6M
	  		
      --구매주기 및 회당객단가 변동성
	  , COALESCE(t2.PURCHS_CYCLE_CHG,0)   AS PURCHS_CYCLE_CHG   
      , COALESCE(t2.DAVG_PURCHS_AMT_CHG,0)   AS DAVG_PURCHS_AMT_CHG

	    
--2) 선호채널 변화 : 1년내 해당 관계사나 업태의 이력 있는 고객의 값만  사용
--타업태 이용여부 및 이용 증감 

      , COALESCE(CASE WHEN DF4.PURCHS_CYCLE_ELAPSE_OFF_BIZTP> 180 THEN 180 ELSE DF4.PURCHS_CYCLE_ELAPSE_OFF_BIZTP END , 180) AS PURCHS_CYCLE_ELAPSE_OFF_BIZTP
   
	  
--3) 상품 이용변화 :  전체 및 상품별 구매횟수, 회당 객단가 증감율(3개월전비교), 구매경과일 ----- 담당별 증감율 

	  , COALESCE(DF5.ORD_4QTY,0) AS ORD_4QTY

	  
	  , COALESCE(CASE WHEN t2.PURCHS_CYCLE_ELAPSE > 180 THEN 180 ELSE t2.PURCHS_CYCLE_ELAPSE END, 180) AS PURCHS_CYCLE_ELAPSE
	  
	  ,COALESCE(DF5.CNT_Q1,0) + COALESCE(DF5.CNT_Q2,0) AS CNT_TOT_6M
	  
      ,COALESCE(DF5.CNT_DIFF_Q1_Q2,0) AS CNT_DIFF_Q1_Q2
      ,COALESCE(DF5.CNT_DIFF_Q2_Q3,0) AS CNT_DIFF_Q2_Q3
      ,COALESCE(DF5.CNT_DIFF_Q3_Q4,0) AS CNT_DIFF_Q3_Q4 
      
      ,COALESCE(DF5.DAVG_AMT_DIFF_Q1_Q2,0) AS DAVG_AMT_DIFF_Q1_Q2
      ,COALESCE(DF5.DAVG_AMT_DIFF_Q2_Q3,0) AS DAVG_AMT_DIFF_Q2_Q3
      ,COALESCE(DF5.DAVG_AMT_DIFF_Q3_Q4,0) AS DAVG_AMT_DIFF_Q3_Q4  
      
      ,COALESCE(DF5.DAVG_AMT_RT_Q1_Q2,0) AS DAVG_AMT_RT_Q1_Q2
      ,COALESCE(DF5.DAVG_AMT_RT_Q2_Q3,0) AS DAVG_AMT_RT_Q2_Q3
      ,COALESCE(DF5.DAVG_AMT_RT_Q3_Q4,0) AS DAVG_AMT_RT_Q3_Q4  

      
      
/***************************************************************************************************/	      
/** 상품분류체계 변경 시 변경 부분2 시작 : 사용 항목 명칭 담당 코드에 맞게 삭제 및 추가**/     
		,COALESCE(CASE WHEN PURCHS_CYCLE_ELAPSE_LV1_10 > 180 THEN 180 ELSE PURCHS_CYCLE_ELAPSE_LV1_10 END,180) AS PURCHS_CYCLE_ELAPSE_LV1_10 
		,COALESCE(CASE WHEN PURCHS_CYCLE_ELAPSE_LV1_11 > 180 THEN 180 ELSE PURCHS_CYCLE_ELAPSE_LV1_11 END,180) AS PURCHS_CYCLE_ELAPSE_LV1_11
--		,COALESCE(CASE WHEN PURCHS_CYCLE_ELAPSE_LV1_20 > 180 THEN 180 ELSE PURCHS_CYCLE_ELAPSE_LV1_20 END,180) AS PURCHS_CYCLE_ELAPSE_LV1_20
		,COALESCE(CASE WHEN PURCHS_CYCLE_ELAPSE_LV1_30 > 180 THEN 180 ELSE PURCHS_CYCLE_ELAPSE_LV1_30 END,180) AS PURCHS_CYCLE_ELAPSE_LV1_30
		,COALESCE(CASE WHEN PURCHS_CYCLE_ELAPSE_LV1_40 > 180 THEN 180 ELSE PURCHS_CYCLE_ELAPSE_LV1_40 END,180) AS PURCHS_CYCLE_ELAPSE_LV1_40
		,COALESCE(CASE WHEN PURCHS_CYCLE_ELAPSE_LV1_41 > 180 THEN 180 ELSE PURCHS_CYCLE_ELAPSE_LV1_41 END,180) AS PURCHS_CYCLE_ELAPSE_LV1_41
--		,COALESCE(CASE WHEN PURCHS_CYCLE_ELAPSE_LV1_42 > 180 THEN 180 ELSE PURCHS_CYCLE_ELAPSE_LV1_42 END,180) AS PURCHS_CYCLE_ELAPSE_LV1_42
		,COALESCE(CASE WHEN PURCHS_CYCLE_ELAPSE_LV1_50 > 180 THEN 180 ELSE PURCHS_CYCLE_ELAPSE_LV1_50 END,180) AS PURCHS_CYCLE_ELAPSE_LV1_50
		,COALESCE(CASE WHEN PURCHS_CYCLE_ELAPSE_LV1_60 > 180 THEN 180 ELSE PURCHS_CYCLE_ELAPSE_LV1_60 END,180) AS PURCHS_CYCLE_ELAPSE_LV1_60
		,COALESCE(CASE WHEN PURCHS_CYCLE_ELAPSE_LV1_70 > 180 THEN 180 ELSE PURCHS_CYCLE_ELAPSE_LV1_70 END,180) AS PURCHS_CYCLE_ELAPSE_LV1_70
		
		
				 
		,COALESCE(CNT_LV1_10_TOT,0) AS CNT_LV1_10_TOT
--		,COALESCE(CNT_LV1_11_TOT,0) AS CNT_LV1_11_TOT
		,COALESCE(CNT_LV1_20_TOT,0) AS CNT_LV1_20_TOT
		,COALESCE(CNT_LV1_30_TOT,0) AS CNT_LV1_30_TOT
		,COALESCE(CNT_LV1_40_TOT,0) AS CNT_LV1_40_TOT
--		,COALESCE(CNT_LV1_41_TOT,0) AS CNT_LV1_41_TOT
--		,COALESCE(CNT_LV1_42_TOT,0) AS CNT_LV1_42_TOT
--		,COALESCE(CNT_LV1_50_TOT,0) AS CNT_LV1_50_TOT
--		,COALESCE(CNT_LV1_60_TOT,0) AS CNT_LV1_60_TOT
		,COALESCE(CNT_LV1_70_TOT,0) AS CNT_LV1_70_TOT


		,CASE WHEN COALESCE(DAVG_AMT_LV1_50_Q1,0) > 0 AND COALESCE(DAVG_AMT_LV1_50_Q2,0)=0 THEN 1 ELSE COALESCE(COALESCE(DAVG_AMT_LV1_50_Q1,0)/NULLIF(DAVG_AMT_LV1_50_Q2,0) - 1,0) END AS DAVG_AMT_LV1_50_RT

/** 상품분류체계 변경 시 변경 부분2 끝 : 사용 항목 명칭 담당 코드에 맞게 삭제 및 추가**/
/***************************************************************************************************/			
		

FROM 
--타겟정보1 : 베인등급과 DNA보유고객
RETENTION_TARGET1 AS DF1

JOIN
--DNA공통
TB_AMT_CMMN_CUST_DNA_DATA  t1 ON DF1.CUST_ID = t1.CUST_ID AND TO_CHAR(t1.YM_WCNT ,'YYYYMMDD')= CONCAT( TO_CHAR(ADD_MONTHS('{YM_BAIN}' ,+1),'YYYYMM'),'01') 

--DNA업태
JOIN TB_AMT_BIZTP_CUST_DNA_DATA t2 ON DF1.CUST_ID = t2.CUST_ID AND t2.AFLCO_CD ='001' AND t2.BIZTP_CD ='10' AND TO_CHAR(t2.YM_WCNT ,'YYYYMMDD')= CONCAT( TO_CHAR(ADD_MONTHS('{YM_BAIN}',+1),'YYYYMM'),'01') 

LEFT JOIN (SELECT * FROM CDS_AMT.TB_AMT_DNA_COMM_CD WHERE DNA_ID_GRP_CD ='LIFESTAGE') t3 ON t1.LSTAGE_GROUP=t3.DNA_ID_CD
LEFT JOIN CDS_DW.TB_BAIN_MEMBR_GRADE_CD t4 ON DF1.BAIN_GRADE_CD = t4.GRADE_CD 


--포인트 정보
LEFT JOIN POINT AS DF3 ON DF1.CUST_ID=DF3.CUST_ID

--타업태 이용여부 및 이용 증감 
LEFT JOIN OTH_CH_USE1 AS DF4 ON DF1.CUST_ID=DF4.CUST_ID 


--1년간 분기별 구매 실적
LEFT JOIN RCIPT_SUMMARY_1Y AS DF5 ON DF1.CUST_ID=DF5.CUST_ID 


-- 6개월간 상품 담당별 구매 실적(총합계 및 최근 1분기전과 2분기전 차이)
LEFT JOIN PRDT_ORD1 AS DF10_1 ON DF1.CUST_ID=DF10_1.CUST_ID
LEFT JOIN PRDT_ORD2 AS DF10_2 ON DF1.CUST_ID=DF10_2.CUST_ID
LEFT JOIN PRDT_ORD3 AS DF10_3 ON DF1.CUST_ID=DF10_3.CUST_ID
LEFT JOIN PRDT_ORD4 AS DF10_4 ON DF1.CUST_ID=DF10_4.CUST_ID

)
'''

try:
    now_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    d_format = "%Y%m"
    datetime.strptime(YM_BAIN, d_format)
    target_dt = str((datetime.strptime(YM_BAIN, '%Y%m')+relativedelta(months=1)).strftime('%Y-%m-%d'))
    
    log_df = add_logs(module = '개인화모델(Retention)',mdl_type='운영',step='0.예측시작',qt='Create',tt=TB_NM2,
                  td=target_dt,st=now_date,et=now_date)
    
    insert_table('CDS_AMT.TB_AMT_CAMPAIGN_ANL_LOG' ,log_df)
    
    #기존 동일 테이블 존재하지 않을 경우 실행 생략
    execute_query(sql1) 
    execute_query(sql2)

    # 2) 예측대상 데이터 명칭

    db_name  = f'''{TB_NM1}'''
    n_core = 5
    print('[n_core] : ',n_core)
    cnt_sql  = f''' SELECT COUNT(1)
                    FROM {db_name}'''
    arg_list,rm = Datachunk_range(rownum_sql = cnt_sql)
    print(arg_list)
    print(rm)
    data_modi1_raw = multiprocesser(arg_list)

    # ===============================================================

    #연령 Null값과 999값 평균으로 대치
    age_mean=data_modi1_raw[data_modi1_raw['AGE'] !=999].AGE.mean()
    data_modi1_raw['AGE'] = data_modi1_raw['AGE'].fillna(age_mean)
    data_modi1_raw["AGE"] = data_modi1_raw["AGE"].apply(lambda x : age_mean if x == 999 else x)

    #우수와 일반 고객 대상 각각 Apply용
    data_modi1_VIP = data_modi1_raw[data_modi1_raw['BAIN_GRADE_CD'].isin(['1','2'])] # Loyal=1, Potential=2
    data_modi1_Normal = data_modi1_raw[data_modi1_raw['BAIN_GRADE_CD'].isin(['3','4'])] # Average=3, Sporadic=4

    with open(f'{DIR_NM}{MODEL1_FILE}', 'rb') as f1:
        model1_VIP_CAT = pickle.load(f1)

    with open(f'{DIR_NM}{MODEL2_FILE}', 'rb') as f2:
        model2_Normal_LGBM = pickle.load(f2)

    model1_feature=model1_VIP_CAT.feature_names_
    model2_feature=model2_Normal_LGBM.feature_name_

    model1_feature=sorted(model1_feature)
    model2_feature=sorted(model2_feature)
    print("우수고객대상 이탈 예측모델 사용 변수 :" ,len(model1_feature) ,"개")
    print("일반고객대상 이탈 예측모델 사용 변수 :" ,len(model2_feature) ,"개")

    col= sorted(list(set(model1_feature)|set(model2_feature)))
    print(len(col),'개\n', col)

    #적은 레벨을 가지고 있는 데이터 범주형 변수로 분류
    feature_ch=list_to_ch_lowlevel(data_modi1_raw[col],20)
    len(feature_ch)
    ## 모델 적용1 : 우수고객 대상
    X1_apply = feature_to_int(data_modi1_VIP[model1_feature],list(set(feature_ch)&set(model1_feature)))
    model1_prob = model1_VIP_CAT.predict_proba(X1_apply, thread_count=5)[:,1] # 평가 데이터 예측

    #생성 모델의 테스트 데이터 예측값과 리뷰용 프로파일링 정보 저장
    model1_predict1 = data_modi1_VIP[['BAIN_GRADE_YM','CUST_ID','BAIN_GRADE_CD']].reset_index().drop(['index'],axis=1)
    model1_predict2 = pd.DataFrame(model1_prob,columns=['PREDICT_PROB']).reset_index().drop(['index'],axis=1)
    model1_predict3 = pd.concat([model1_predict1,model1_predict2],axis=1)#.drop(['index'],axis=1)
    model1_predict3['PREDICT_PROB_GROUP'] =model1_predict3['PREDICT_PROB'].apply(lambda x : 1 if x > 0.5 else 0)

    mask_dt ='%Y-%m-%d'
    model1_predict3['DATA_CRTN_DT'] =datetime.now().strftime(mask_dt)

    error1,error_msg1= mdl_error_check(model1_predict3)
    error_df = pd.DataFrame(columns=[['Model','error_code', 'error_msg']])
    error_df.loc[1] = 'model1',error1,error_msg1


    ## 모델 적용2 : 일반고객 대상
    ### 모델용 데이터 변환 : Light GBM용
    X2_apply = feature_to_ch(data_modi1_Normal[model2_feature],list(set(feature_ch)&set(model2_feature)))
    print(X2_apply.shape)

    ### 모델 적용 및 예측결과 테이블 생성
    model2_prob = model2_Normal_LGBM.predict_proba(X2_apply, n_jobs=5)[:,1] # 평가 데이터 예측

    #생성 모델의 테스트 데이터 예측값과 리뷰용 프로파일링 정보 저장
    model2_predict1 = data_modi1_Normal[['BAIN_GRADE_YM','CUST_ID','BAIN_GRADE_CD']].reset_index().drop(['index'],axis=1)
    model2_predict2 = pd.DataFrame(model2_prob,columns=['PREDICT_PROB']).reset_index().drop(['index'],axis=1)
    model2_predict3 = pd.concat([model2_predict1,model2_predict2],axis=1)#.drop(['index'],axis=1)
    model2_predict3['PREDICT_PROB_GROUP'] =model2_predict3['PREDICT_PROB'].apply(lambda x : 1 if x > 0.5 else 0)

    mask_dt ='%Y-%m-%d'
    model2_predict3['DATA_CRTN_DT'] =datetime.now().strftime(mask_dt)

    model2_predict3.head()

    ### 모델2 예측결과 과정 오류 확인

    error2,error_msg2= mdl_error_check(model2_predict3)

    error_df.loc[2] = 'model2',error2,error_msg2

    ## 모델1과 모델2 결과 SAP HANA DB 지정 테이블에 추가

    if error1==0 & error2==0:
        predict_df=pd.concat([model1_predict3 ,model2_predict3], axis=0, ignore_index=True)
        del_dup_insert_table(TB_NM2,predict_df)
    end_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_df = add_logs(module = '개인화모델(Retention)',mdl_type='운영',step='1.APPLY 테이블 생성 및 결과적재',qt='Insert',tt=TB_NM2,
                  td=target_dt,st=now_date,et=end_date)
    insert_table('CDS_AMT.TB_AMT_CAMPAIGN_ANL_LOG' ,log_df)
except Exception as e:
    error = str(e)
    logger.error(error)
    end_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_df = add_logs(module = '개인화모델(Retention)',mdl_type='운영',step='error',qt='error',tt='==== error occured ====',
                  td=datetime.now().strftime('%Y-%m-%d'),st=now_date,et=end_date,ec=1,es=error)
    insert_table('CDS_AMT.TB_AMT_CAMPAIGN_ANL_LOG' ,log_df)
